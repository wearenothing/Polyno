#include <iostream>
using namespace std;

typedef struct Node* Poly;
struct Node
{
	int coe;
	int exp;
	Poly next;
};

void Attach(int coe, int exp, Poly* prear)
{
	Poly s = (Poly)malloc(sizeof(struct Node));
	s->next = NULL;
	s->coe = coe;
	s->exp = exp;
	(*prear)->next = s;
	*prear = s;
}

Poly readPoly()
{
	int n;
	cin >> n;
	Poly P= (Poly)malloc(sizeof(struct Node));
	P->next = NULL;
	Poly rear = P;
	for (int i = 0; i < n; i++)
	{
		int c, e;
		cin >> c >> e;
		Attach(c, e, &rear);
	}
	Poly t = P;
	P = P->next;
	free(t);
	return P;
}

void printPoly(Poly p)
{
	int flag = 0;
	if (!p)
	{
		cout << "0 0" << endl;
		return;
	}
	while (p)
	{
		if (!flag)
			flag = 1;
		else
			cout << " ";
		cout << p->coe << " " << p->exp;
		p = p->next;
	}
}

Poly mult(Poly p1, Poly p2)
{
	if (!p1 || !p2)
		return NULL;
	Poly P, t1, t2, rear, t;
	P= (Poly)malloc(sizeof(struct Node));
	P->next = NULL;
	rear = P;
	t1 = p1;
	t2 = p2;
	while (t2)
	{
		Attach(t1->coe*t2->coe, t1->exp+t2->exp, &rear);
		t2 = t2->next;
	}
	t1 = t1->next;
	while (t1)
	{
		
		rear = P;
		t2 = p2;
		while (t2)
		{
			int c = t1->coe*t2->coe;
			int e = t1->exp + t2->exp;
			while (rear->next&&rear->next->exp>e)
			{
				rear = rear->next;
			}
			if (rear->next&&rear->next->exp == e)
			{
				if (c + rear->next->coe == 0)
				{
					t = rear;
					rear = rear->next;
					free(t);
				}
				else
				{
					rear->next->coe += c;
				}
			}
			else
			{
				t= (Poly)malloc(sizeof(struct Node));
				t->coe = c;
				t->exp = e;
				t->next = rear->next;
				rear->next = t;
				rear = t;
			}
			t2 = t2->next;
		}
		t1 = t1->next;
	}
	t = P; P = P->next; free(t);
	return P;
}
Poly addPoly(Poly p1, Poly p2)
{
	Poly P, t1, t2, t, rear;
	P= (Poly)malloc(sizeof(struct Node));
	P->next = NULL;
	t1 = p1;
	t2 = p2;
	rear = P;
	while (t1&&t2)
	{
		if (t1->exp > t2->exp)
		{
			Attach(t1->coe, t1->exp, &rear);
			t1 = t1->next;
		}
		else if (t1->exp == t2->exp)
		{
			if (t1->coe + t2->coe)
				Attach(t1->coe + t2->coe, t1->exp, &rear);
			t1 = t1->next;
			t2 = t2->next;
		}
		else
		{
			Attach(t2->coe, t2->exp, &rear);
			t2 = t2->next;
		}
	}
	while (t1)
	{
		Attach(t1->coe, t1->exp, &rear);
		t1 = t1->next;
	}
	while (t2)
	{
		Attach(t2->coe, t2->exp, &rear);
		t2 = t2->next;
	}
	t = P; P = P->next; free(t);
	return P;
}
int main()
{
	Poly p1,p2,pp,pa;
	p1 = readPoly();
	p2= readPoly();
	pp = mult(p1, p2);
	printPoly(pp);
	pa = addPoly(p1, p2);
	printPoly(pa);
	return 0;
}
