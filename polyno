// polymo.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "pch.h"
#include <iostream>
using namespace std;

typedef struct Node* Poly;
struct Node
{
	int coe;
	int exp;
	Poly next;
};

void Attach(int c, int e, Poly *pRear)//为什么要用指针的指针:因为Rear的值要得到更新
{
	Poly p=(Poly)malloc(sizeof(struct Node));
	p->coe = c;
	p->exp = e;
	p->next = NULL;
	(*pRear)->next = p;
	*pRear = p;
}
Poly ReadPoly()
{
	Poly P, Rear, t;
	
	P= (Poly)malloc(sizeof(struct Node));
	P->next = NULL;
	Rear = P;
	int n;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		int c, e;
		cin >> c >> e;
		Attach(c, e, &Rear);
	}
	t = P; P = P->next; free(t);
	return P;
}

Poly Add(Poly p1, Poly p2)
{
	Poly t1, t2,p,rear;
	t1 = p1;
	t2 = p2;
	p= (Poly)malloc(sizeof(struct Node));
	p->next = NULL;
	rear = p;
	while (t1&&t2)
	{
		if(t1->exp==t2->exp)
		{
			if(t1->coe + t2->coe!=0)
			Attach(t1->coe + t2->coe, t1->exp, &rear);
			t1 = t1->next;
			t2 = t2->next;
		}
		else if (t1->exp < t2->exp)
		{
			Attach(t2->coe, t2->exp, &rear);
			t2 = t2->next;
		}
		else
		{
			Attach(t1->coe, t1->exp, &rear);
			t1 = t1->next;
		}
	}
	while(t1)
	{ 
		Attach(t1->coe, t1->exp, &rear);
		t1 = t1->next;
	}
	while (t2)
	{
		Attach(t2->coe, t2->exp, &rear);
		t2 = t2->next;
	}
	//删除增加的第一个节点？？
	return p;
}

Poly Mult(Poly p1, Poly p2)
{
	Poly t1, t2, p, rear,t;
	if (!p1 || !p2) return NULL;
	t1 = p1;
	t2 = p2;
	p = (Poly)malloc(sizeof(struct Node));
	p->next = NULL;
	rear = p;
	while (t2)
	{
		Attach(t1->coe*t2->coe, t1->exp + t2->exp, &rear);
		t2 = t2->next;
	}
	t1 = t1->next;
	while (t1)
	{
		t2 = p2;
		rear = p;
		while (t2)
		{
			int c = t1->coe*t2->coe;
			int e = t1->exp + t2->exp;
			while (rear->next&&e < rear->next->exp)
				rear = rear->next;
			if(rear->next&&e == rear->next->exp)
			{
				if(rear->next->coe+c)
					rear->next->coe+=c;
				else
				{
					t = rear->next;
					rear->next = t->next;
					free(t);
				}
			}
			else
			{
				t= (Poly)malloc(sizeof(struct Node));
				t->coe = c;
				t->exp = e;
				t->next = rear->next;
				rear->next = t;
				rear = t;
			}
			
			t2 = t2->next;
		}
		t1 = t1->next;
	}
	t = p; p = p->next; free(p);
	return p;
}
void printPoly(Poly p)
{
	int flag = 0;
	if (!p)
	{
		cout << "0 0" << endl;
		return;
	}
	while (p)
	{
		if (!flag)
			flag = 1;
		else
			cout << " ";
		cout << p->coe << " " << p->exp;
		p = p->next;
	}
	cout << endl;
}

